Select current_database();

CREATE TABLE Roles_Usuarios (
    id SERIAL PRIMARY KEY,
    nombre_rol VARCHAR(50) NOT NULL,
    descripcion_rol TEXT,
    fecha_creacion TIMESTAMP NOT NULL DEFAULT NOW(),
    fecha_modificacion TIMESTAMP NOT NULL DEFAULT NOW()
);


CREATE TABLE Usuario (
    id SERIAL PRIMARY KEY,
    nombre VARCHAR(100) NOT NULL,
    email VARCHAR(100) NOT NULL UNIQUE,
    contraseÃ±a VARCHAR(255) NOT NULL,
    id_Roles_Usuarios INTEGER NOT NULL,
    estado BOOLEAN NOT NULL DEFAULT TRUE,
    fecha_creacion TIMESTAMP NOT NULL DEFAULT NOW(),
    fecha_modificacion TIMESTAMP NOT NULL DEFAULT NOW(),
    FOREIGN KEY (id_Roles_Usuarios) REFERENCES Roles_Usuarios(id)
);



CREATE TABLE Cliente (
    id SERIAL PRIMARY KEY,
    nombre VARCHAR(100) NOT NULL,
    email VARCHAR(100) NOT NULL UNIQUE,
    direccion VARCHAR(255) NOT NULL,
    telefono VARCHAR(15) NOT NULL,
    fecha_registro TIMESTAMP NOT NULL DEFAULT NOW(),
    estado BOOLEAN NOT NULL DEFAULT TRUE
);


CREATE TABLE Proveedor (
    id SERIAL PRIMARY KEY,
    nombre VARCHAR(100) NOT NULL,
    contacto VARCHAR(100) NOT NULL,
    direccion VARCHAR(255) NOT NULL,
    email VARCHAR(100) UNIQUE,
    telefono VARCHAR(15),
    fecha_registro TIMESTAMP NOT NULL DEFAULT NOW(),
    estado BOOLEAN NOT NULL DEFAULT TRUE
);

CREATE TABLE Pedido_Detalle (
 id SERIAL PRIMARY KEY,
 id_pedido_maestro INTEGER NOT NULL,
 id_producto INTEGER NOT NULL,
 cantidad INTEGER NOT NULL CHECK (cantidad > 0),
 precio DECIMAL(10,2) NOT NULL,
 descuento DECIMAL(10,2) DEFAULT 0,
 FOREIGN KEY (id_pedido_maestro) REFERENCES Pedido_Maestro(id),
 FOREIGN KEY (id_producto) REFERENCES Producto(id)
);

CREATE TABLE Factura_Maestro (
 id SERIAL PRIMARY KEY,
 id_pedido INTEGER NOT NULL,
 numero_factura VARCHAR(50) UNIQUE,
 fecha DATE NOT NULL DEFAULT CURRENT_DATE,
 total DECIMAL(10,2) NOT NULL,
 impuesto DECIMAL(10,2) DEFAULT 0,
 descuento DECIMAL(10,2) DEFAULT 0,
 FOREIGN KEY (id_pedido) REFERENCES Pedido_Maestro(id)
);

CREATE TABLE Factura_Detalle (
 id SERIAL PRIMARY KEY,
 id_factura_maestro INTEGER NOT NULL,
 id_producto INTEGER NOT NULL,
 cantidad INTEGER NOT NULL CHECK (cantidad > 0),
 precio_unitario DECIMAL(10,2) NOT NULL,
 FOREIGN KEY (id_factura_maestro) REFERENCES Factura_Maestro(id),
 FOREIGN KEY (id_producto) REFERENCES Producto(id)
);


CREATE TABLE Categoria_Producto (
    id SERIAL PRIMARY KEY,
    nombre VARCHAR(100) NOT NULL,
    descripcion TEXT NOT NULL,
    fecha_creacion TIMESTAMP NOT NULL DEFAULT NOW(),
    estado BOOLEAN NOT NULL DEFAULT TRUE
);


CREATE TABLE Producto (
    id SERIAL PRIMARY KEY,
    codigo VARCHAR(50) UNIQUE,
    nombre VARCHAR(100) NOT NULL,
    descripcion TEXT NOT NULL,
    precio DECIMAL(10,2) NOT NULL,
    stock INTEGER NOT NULL CHECK (stock >= 0),
    id_Proveedor INTEGER NOT NULL,
    id_Categoria INTEGER NOT NULL,
    fecha_registro TIMESTAMP NOT NULL DEFAULT NOW(),
    estado BOOLEAN NOT NULL DEFAULT TRUE,
    FOREIGN KEY (id_Proveedor) REFERENCES Proveedor(id),
    FOREIGN KEY (id_Categoria) REFERENCES Categoria_Producto(id)
);



CREATE TABLE Material (
    id SERIAL PRIMARY KEY,
    nombre VARCHAR(100) NOT NULL,
    descripcion TEXT NOT NULL,
    unidad_medida VARCHAR(20),
    fecha_creacion TIMESTAMP NOT NULL DEFAULT NOW()
);



CREATE TABLE Material_Producto (
    id_producto INTEGER NOT NULL,
    id_material INTEGER NOT NULL,
    cantidad INTEGER NOT NULL CHECK (cantidad > 0),
    PRIMARY KEY (id_producto, id_material),
    FOREIGN KEY (id_producto) REFERENCES Producto(id),
    FOREIGN KEY (id_material) REFERENCES Material(id)
);



CREATE TABLE Orden_Produccion (
    id SERIAL PRIMARY KEY,
    id_producto INTEGER NOT NULL,
    fecha_inicio TIMESTAMP NOT NULL DEFAULT NOW(),
    fecha_fin TIMESTAMP,
    cantidad INTEGER NOT NULL,
    estado VARCHAR(50) NOT NULL,
    comentarios TEXT,
    FOREIGN KEY (id_producto) REFERENCES Producto(id)
);



CREATE TABLE Material_OrdenProduccion (
    id_orden_produccion INTEGER NOT NULL,
    id_material INTEGER NOT NULL,
    cantidad INTEGER NOT NULL CHECK (cantidad > 0),
    PRIMARY KEY (id_orden_produccion, id_material),
    FOREIGN KEY (id_orden_produccion) REFERENCES Orden_Produccion(id),
    FOREIGN KEY (id_material) REFERENCES Material(id)
);


--complemento de tablas-- 

CREATE TABLE Inventario (
    id SERIAL PRIMARY KEY,
    id_producto INTEGER NOT NULL,
    cantidad INTEGER NOT NULL CHECK (cantidad >= 0),
    ubicacion VARCHAR(100) NOT NULL,
    ultima_actualizacion TIMESTAMP NOT NULL DEFAULT NOW(),
    FOREIGN KEY (id_producto) REFERENCES Producto(id)
);



CREATE TABLE Pedido_Maestro (
    id SERIAL PRIMARY KEY,
    id_cliente INTEGER NOT NULL,
    fecha TIMESTAMP NOT NULL DEFAULT NOW(),
    total DECIMAL(10,2) NOT NULL,
    direccion_envio VARCHAR(255),
    estado_pedido VARCHAR(50) NOT NULL DEFAULT 'Pendiente',
    FOREIGN KEY (id_cliente) REFERENCES Cliente(id)
);



CREATE TABLE Historial_Pedido (
    id SERIAL PRIMARY KEY,
    id_pedido INTEGER NOT NULL,
    fecha TIMESTAMP NOT NULL DEFAULT NOW(),
    estado VARCHAR(50) NOT NULL,
    comentarios TEXT,
    FOREIGN KEY (id_pedido) REFERENCES Pedido_Maestro(id)
);

CREATE TABLE Contabilidad (
    id SERIAL PRIMARY KEY,
    fecha DATE NOT NULL DEFAULT CURRENT_DATE,
    tipo VARCHAR(50) NOT NULL,
    monto DECIMAL(10,2) NOT NULL,
    descripcion TEXT NOT NULL,
    referencia VARCHAR(100)
);


CREATE TABLE Bitacora (
    id SERIAL PRIMARY KEY,
    id_usuario INTEGER NOT NULL,
    accion TEXT NOT NULL,
    fecha TIMESTAMP NOT NULL DEFAULT NOW(),
    ip_usuario VARCHAR(45),
    FOREIGN KEY (id_usuario) REFERENCES Usuario(id)
);

CREATE TABLE Metodo_Pago (
    id SERIAL PRIMARY KEY,
    nombre VARCHAR(50) NOT NULL,
    descripcion TEXT NOT NULL,
    estado BOOLEAN NOT NULL DEFAULT TRUE
);
